import numpy as np
import matplotlib.pyplot as plt

"""
RjG = np.load("data/R_jG.npy")
AjG = np.load("data/accuracy_jG.npy")
RsB = np.load("data/R_sB.npy")
AsB = np.load("data/accuracy_sB.npy")


plt.plot(np.arange(RjG.shape[0]), RjG, label="Joint")
plt.plot(np.arange(RsB.shape[0]), RsB, label="Separate")
plt.plot(np.arange(len(RsB)), np.ones(len(RsB))*0.0688909)
plt.legend()
plt.xlabel('x100 Episodes')
plt.ylabel('Discounted Return')
plt.show()
plt.savefig("data/R_jG_sB.png")
plt.close()

plt.plot(np.arange(AjG.shape[0]), AjG, label="Joint")
plt.plot(np.arange(AsB.shape[0]), AsB, label="Separate")
plt.legend()
plt.xlabel('x100 Episodes')
plt.ylabel('Accuracy')
plt.show()
plt.savefig("data/accuracy_jG_sB.png")
plt.close()


plt.plot(np.arange(RjG.shape[0]), RjG, label="Joint")
plt.plot(np.arange(len(RsB)), np.ones(len(RsB))*0.0688909)
plt.legend()
plt.xlabel('x100 Episodes')
plt.ylabel('Discounted Return')
plt.show()
plt.savefig("data/R_jG.png")
plt.close()

plt.plot(np.arange(RsB.shape[0]), RsB, label="Separate")
plt.plot(np.arange(len(RsB)), np.ones(len(RsB))*0.0688909)
plt.legend()
plt.xlabel('x100 Episodes')
plt.ylabel('Discounted Return')
plt.show()
plt.savefig("data/R_sB.png")
plt.close()

plt.plot(np.arange(AjG.shape[0]), AjG, label="Joint")
plt.legend()
plt.xlabel('x100 Episodes')
plt.ylabel('Accuracy')
plt.show()
plt.savefig("data/accuracy_jG.png")
plt.close()

plt.plot(np.arange(AsB.shape[0]), AsB, label="Separate")
plt.legend()
plt.xlabel('x100 Episodes')
plt.ylabel('Accuracy')
plt.show()
plt.savefig("data/accuracy_sB.png")
plt.close()
"""

jb = np.load("data5/joint_bad.npy")
sg = np.load("data5/separate_good.npy")
sgrs = np.load("data5/separate_good_rewards_summed.npy")

plt.plot(np.arange(len(jb[:, 1].flatten())), jb[:, 1].flatten(), label="Joint")
plt.plot(np.arange(len(sg[:, 3].flatten())), sg[:, 3].flatten(), label="Separate")
plt.plot(np.arange(len(sgrs[:, 3].flatten())), sgrs[:, 3].flatten(), label="Separate rewards summed")
plt.legend()
plt.xlabel('x1000 Episodes Taxi')
plt.ylabel('Discounted Return')
plt.show()
plt.savefig("data5/Taxi_comparison.png")
plt.close()

plt.plot(np.arange(len(jb[:, 3].flatten())), jb[:, 3].flatten(), label="Joint")
plt.plot(np.arange(len(sg[:, 1].flatten())), sg[:, 1].flatten(), label="Separate")
plt.plot(np.arange(len(sgrs[:, 1].flatten())), sgrs[:, 1].flatten(), label="Separate rewards summed")
plt.legend()
plt.xlabel('x1000 Episodes Frozen Lake')
plt.ylabel('Discounted Return')
plt.show()
plt.savefig("data5/Frozen_Lake_comparison.png")
plt.close()